#!/usr/bin/env ruby

require 'pathname'

root = Pathname.new(__FILE__).realpath.parent.parent
$:.unshift root.join('lib') if $0 == __FILE__

require 'optparse'
require 'oddb2xml'

def help
  <<EOS
#$0 ver.#{Oddb2xml::VERSION}
Usage:
  oddb2xml [option]
    -a T, --append=T     Additional target. T, only 'nonpharma' is available.
    -c F, --compress=F   Compress format F. {tar.gz|zip}
    -f F, --format=F     File format F, default is xml. {xml|dat}
                         If F is given, -o option is ignored.
    -o O, --optional=O   Optional output. O, only 'fi' is available.
    -t S, --tag-suffix=S XML tag suffix S. Default is none. [A-z0-9_]
                         If S is given, it is also used as prefix of filename.
    -h,   --help         Show this help message.
EOS
end

parser = OptionParser.new
opts = {
  :nonpharma    => false,
  :compress_ext => nil,
  :format       => :xml,
  :fi           => false,
  :tag_suffix   => nil,
  :debug        => false,
}

parser.on('-a v', '--append v',     /nonpharma/)     {|v| opts[:nonpharma] = true }
parser.on('-c v', '--compress v',   /tar\.gz|zip/)   {|v| opts[:compress_ext] = v }
parser.on('-f v', '--format v',     /dat/)           {|v| opts[:format] = :dat }
parser.on('-o v', '--optional v',   /fi/)            {|v| opts[:fi] = true }
parser.on('-t v', '--tag-suffix v', /^[A-z0-9_]*$/i) {|v| opts[:tag_suffix] = v.upcase }
#parser.on('--debug') {|v| opts[:debug] = true }
parser.on_tail('-h', '--help') { puts help; exit }

args = ARGV.dup
begin
  parser.parse!(args)
rescue OptionParser::MissingArgument,
       OptionParser::InvalidArgument,
       OptionParser::InvalidOption
  puts help
  exit
end

ui = Oddb2xml::Cli.new(opts)
begin
  #puts opts if opts[:debug]
  ui.run
rescue Interrupt
  puts
  exit
end
